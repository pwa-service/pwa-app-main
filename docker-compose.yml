version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - pwa-network

  auth-service:
    build:
      context: .
      dockerfile: pwa-auth-service/Dockerfile
    working_dir: /workspace/pwa-auth-service
    container_name: auth-service
    environment:
      - PORT=4040
      - AUTH_SERVICE_GRPC_URL=auth-service:50051
      - AUTH_JWKS_URL=http://auth-service:4040/.well-known/jwks.json
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_ISSUER=https://pwaservice.site/
      - AUTH_AUDIENCE=api
      - AUTH_ACCESS_TTL=900
      - AUTH_REFRESH_TTL=604800
      - FRONTEND_URL=https://pwaservice.site/apps
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - pwa-network

  event-handler:
    build:
      context: .
      dockerfile: pwa-event-handler/Dockerfile
    working_dir: /workspace/pwa-event-handler
    env_file:
      - ./.env
    environment:
      - PORT=4300
      - EVENT_HANDLER_GRPC_URL=event-handler:50053
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
      - TRACKER_BASE_URL=https://tracker.example.com/landing
      - FB_MOCK=true
      - FB_GRAPH_VERSION=v21.0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
    networks:
      - pwa-network

  logger-service:
    build:
      context: .
      dockerfile: pwa-logger/Dockerfile
    working_dir: /workspace/pwa-logger
    container_name: logger-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_NAME=PWA_EVENTS_QUEUE
      - WORKER_CONCURRENCY=5
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pwa-network

  api-gateway:
    build:
      context: .
      dockerfile: ./pwa-api-gateway/Dockerfile
    container_name: pwa-app-api-gateway-1
    environment:
      - PORT=3000
      - AUTH_SERVICE_GRPC_URL=auth-service:50051
      - EVENT_HANDLER_GRPC_URL=event-handler:50053
      - GENERATOR_GRPC_URL=pwa-generator:50055
      - AUTH_JWKS_URL=http://auth-service:4040/.well-known/jwks.json
      - AUTH_ISSUER=https://pwaservice.site/
      - AUTH_AUDIENCE=api
    depends_on:
      auth-service:
        condition: service_started
    networks:
      - pwa-network
    # НЕТ ПОРТОВ - только через nginx

  pwa-generator:
    build:
      context: .
      dockerfile: pwa-generator/Dockerfile
    working_dir: /workspace/pwa-generator
    container_name: pwa-generator
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GENERATOR_GRPC_URL=pwa-generator:50054
      - QUEUE_NAME=BUILD_QUEUE
      - QUEUE_PREFIX=pwa
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pwa-network

  pwa-builder:
    build:
      context: .
      dockerfile: pwa-builder/Dockerfile
    container_name: pwa-builder
    env_file:
      - ./.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pwa-network

  redis:
    image: redis:7-alpine
    container_name: redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - pwa-network

  prisma-migrator:
    build:
      context: .
      dockerfile: pwa-prisma/Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for database to be ready..."
        sleep 5
        echo "Running Prisma migrations..."
        npx prisma migrate deploy
        echo "Migrations completed successfully"
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
    networks:
      - pwa-network

  prisma-studio:
    build:
      context: .
      dockerfile: pwa-prisma/Dockerfile.studio
    container_name: prisma-studio
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}/pwa_db?schema=public
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - pwa-network

volumes:
  postgres_data:
    driver: local
    name: pwa_app_postgres_data
  redis_data:
    driver: local
    name: pwa_app_redis_data

networks:
  pwa-network:
    external: true
    name: pwa-network
