version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file:
      - ./.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pwa_db} && psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pwa_db} -c 'SELECT 1'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  auth-service:
    build:
      context: .
      dockerfile: pwa-auth-service/Dockerfile
    working_dir: /workspace/pwa-auth-service
    container_name: auth-service
    environment:
      - PORT=4040
      - AUTH_SERVICE_GRPC_URL=auth-service:50051
      - AUTH_JWKS_URL=http://auth-service:4040/.well-known/jwks.json
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pwa_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_ISSUER=https://auth.local/
      - AUTH_AUDIENCE=api
      - AUTH_ACCESS_TTL=900
      - AUTH_REFRESH_TTL=604800
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "4000:4000"
      - "4040:4040"
      - "50051:50051"

  event-handler:
    build:
      context: .
      dockerfile: pwa-event-handler/Dockerfile
    working_dir: /workspace/pwa-event-handler
    env_file:
      - ./.env
    environment:
      - PORT=4300
      - EVENT_HANDLER_GRPC_URL=event-handler:50053
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pwa_db?schema=public
      - TRACKER_BASE_URL=https://tracker.example.com/landing
      - FB_MOCK=true
      - FB_GRAPH_VERSION=v21.0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
    ports:
      - "50053:50053"

  logger-service:
    build:
      context: .
      dockerfile: pwa-logger/Dockerfile
    working_dir: /workspace/pwa-logger
    container_name: logger-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pwa_db?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_NAME=PWA_EVENTS_QUEUE
      - WORKER_CONCURRENCY=5
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: ./pwa-api-gateway/Dockerfile
    environment:
      - PORT=3000
      - AUTH_SERVICE_GRPC_URL=auth-service:50051
      - EVENT_HANDLER_GRPC_URL=event-handler:50053
      - AUTH_JWKS_URL=http://auth-service:4040/.well-known/jwks.json
      - AUTH_ISSUER=https://auth.local/
      - AUTH_AUDIENCE=api
    depends_on:
      - auth-service
      - event-handler
    ports:
      - "3000:3000"

  redis:
    image: redis:7-alpine
    container_name: redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  prisma-migrator:
    build:
      context: .
      dockerfile: pwa-prisma/Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pwa_db?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for database to be ready..."
        sleep 5
        echo "Running Prisma migrations..."
        npx prisma migrate deploy
        echo "Migrations completed successfully"
    restart: "on-failure"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5

  prisma-studio:
    image: node:lts-alpine3.17
    user: node
    working_dir: /home/node/app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/pwa_db?schema=public
      - npm_config_cache=/tmp/.npm
    volumes:
      - ./pwa-prisma:/home/node/app:ro
      - prisma_studio_modules:/home/node/app/node_modules
    command: sh -c "npm install --prefer-offline && npx prisma generate && npx prisma studio --hostname 0.0.0.0 --port 5555 --browser none"
    ports:
      - 5555:5555
    depends_on:
      postgres:
        condition: service_healthy
      prisma-migrator:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
    name: pwa_app_postgres_data
  redis_data:
    driver: local
    name: pwa_app_redis_data
  prisma_studio_modules:
    driver: local
    name: pwa_app_prisma_studio_modules
