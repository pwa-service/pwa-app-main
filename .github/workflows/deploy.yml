name: Deploy via Rsync & Docker Compose

on:
  push:
    branches:
      - main

env:
  DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
  DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Sync repository via rsync
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.env' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            $DEPLOY_USER@$DEPLOY_HOST:/home/$DEPLOY_USER/pwa-app/

      - name: Upload environment variables
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          echo "*********** Uploading .env file to remote server ***********"
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/pwa-app"

          cat > .env <<EOL
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          EOL

          scp -o StrictHostKeyChecking=no .env $DEPLOY_USER@$DEPLOY_HOST:/home/$DEPLOY_USER/pwa-app/.env

      - name: Deploy on remote server
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            set -e

            cleanup() {
              echo "*********** Deleting .env file ***********"
              rm -f ~/pwa-app/.env
            }

            trap cleanup EXIT

            cd ~/pwa-app

            echo "*********** Stopping Docker Compose ***********"
            docker compose down

            echo "*********** Starting Docker Compose ***********"
            docker compose up -d --build --remove-orphans

            echo "*********** Checking migrations status ***********"
            # Ждем завершения prisma-migrator
            for i in {1..30}; do
              STATUS=$(docker inspect pwa-app-prisma-migrator-1 --format='{{.State.Status}}' 2>/dev/null || echo "running")
              
              if [ "$STATUS" = "exited" ]; then
                EXIT_CODE=$(docker inspect pwa-app-prisma-migrator-1 --format='{{.State.ExitCode}}')
                if [ "$EXIT_CODE" -eq 0 ]; then
                  echo "Migrations completed successfully"
                  break
                else
                  echo "Migrations FAILED with exit code $EXIT_CODE"
                  docker compose logs prisma-migrator
                  exit 1
                fi
              fi
              
              if [ $i -eq 30 ]; then
                echo "Migrations timed out"
                docker compose logs prisma-migrator
                exit 1
              fi
              
              echo "Waiting for migrations... ($i/30)"
              sleep 2
            done

            echo "*********** Waiting for services to become healthy ***********"
            for i in {1..30}; do
              unhealthy=$(docker ps --filter "health=unhealthy" --format '{{.Names}}')
              starting=$(docker ps --filter "health=starting" --format '{{.Names}}')
              
              # Проверяем неожиданно остановленные контейнеры (кроме prisma-migrator)
              exited=$(docker ps -a --filter "status=exited" --format '{{.Names}}' | grep -v "prisma-migrator" || true)
              
              if [ -z "$unhealthy" ] && [ -z "$starting" ] && [ -z "$exited" ]; then
                echo "All services healthy"
                docker compose ps
                break
              fi
              
              if [ $i -eq 30 ]; then
                echo "Services failed to start"
                docker compose ps
                docker compose logs --tail=100
                exit 1
              fi
              
              echo "⏳ Waiting for services... ($i/30)"
              sleep 5
            done

            echo "*********** Cleaning up Docker resources ***********"
            docker image prune -f
            docker container prune -f
            
            echo "Deployment completed successfully"
          EOF
